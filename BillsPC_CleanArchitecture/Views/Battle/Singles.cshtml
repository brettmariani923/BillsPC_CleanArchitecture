@model BillsPC_CleanArchitecture.Application.Models.BattleViewModel
@using System.Net

@{
    ViewData["Title"] = "Pokémon Battle Simulator - Interactive";
    bool battleOver = Model.Pokemon1CurrentHP == 0 || Model.Pokemon2CurrentHP == 0;
}

<link rel="stylesheet" href="~/css/battlestyles.css" />

<div class="battle-container">
    <div class="pokemon-area">
        <!-- Player Pokémon -->
        <div class="pokemon-box">
            <div class="pokemon-name">
                @Model.Pokemon1.Name
                @if (Model.Pokemon1Status != "None" && !string.IsNullOrEmpty(Model.Pokemon1Status))
                {
                    <span class="status-effect">(@Model.Pokemon1Status)</span>
                }
            </div>
            <div class="hp-bar-bg">
                <div id="player-hp-bar"
                     class="hp-bar-fill"
                     data-max="@Model.Pokemon1.HP"
                     data-current="@Model.Pokemon1CurrentHP">
                </div>
            </div>
            <div>HP: @Model.Pokemon1CurrentHP / @Model.Pokemon1.HP</div>
            <img id="pokemon1-sprite"
                 src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/@(Model.Pokemon1.PokemonID).png"
                 alt="@Model.Pokemon1.Name"
                 class="pokemon-sprite" />
        </div>

        <!-- AI Pokémon -->
        <div class="pokemon-box">
            <div class="pokemon-name">
                @Model.Pokemon2.Name
                @if (Model.Pokemon2Status != "None" && !string.IsNullOrEmpty(Model.Pokemon2Status))
                {
                    <span class="status-effect">(@Model.Pokemon2Status)</span>
                }
            </div>
            <div class="hp-bar-bg">
                <div id="ai-hp-bar"
                     class="hp-bar-fill"
                     data-max="@Model.Pokemon2.HP"
                     data-current="@Model.Pokemon2CurrentHP">
                </div>
            </div>
            <div>HP: @Model.Pokemon2CurrentHP / @Model.Pokemon2.HP</div>
            <img id="pokemon2-sprite"
                 src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/@(Model.Pokemon2.PokemonID).png"
                 alt="@Model.Pokemon2.Name"
                 class="pokemon-sprite" />
        </div>
    </div>

    <div class="battle-text" id="battleText">
        @Model.BattleLog?.TrimEnd().Split('\n').LastOrDefault()
    </div>

    @if (!battleOver)
    {
        if (Model.IsPlayerOneTurn)
        {
            <h4 class="text-center mb-3">
                Choose @Model.Pokemon1.Name's next move:
            </h4>

            <form method="post" asp-action="UsePlayerMoveSingle" asp-controller="Battle" class="moves" id="moveForm">
                @foreach (var move in Model.Pokemon1Moves)
                {
                    <button type="button" class="move-button" data-move="@move.Name">
                        @move.Name (@move.Power)
                    </button>
                }
                <input type="hidden" name="moveName" id="moveNameInput" />
                <input type="hidden" name="pokemon1Id" value="@Model.Pokemon1.PokemonID" />
                <input type="hidden" name="pokemon2Id" value="@Model.Pokemon2.PokemonID" />
                <input type="hidden" name="pokemon1CurrentHP" value="@Model.Pokemon1CurrentHP" />
                <input type="hidden" name="pokemon2CurrentHP" value="@Model.Pokemon2CurrentHP" />
                <input type="hidden" name="pokemon1Status" value="@Model.Pokemon1Status" />
                <input type="hidden" name="pokemon2Status" value="@Model.Pokemon2Status" />
                <input type="hidden" name="pokemon1SleepCounter" value="@Model.Pokemon1SleepCounter" />
                <input type="hidden" name="pokemon2SleepCounter" value="@Model.Pokemon2SleepCounter" />
                <input type="hidden" name="battleLog" value="@WebUtility.HtmlEncode(Model.BattleLog ?? "")" />
            </form>
        }
        else
        {
            <p class="text-center fst-italic">Opponent is choosing a move...</p>

            <form method="post" asp-action="UseAIMoveSingle" asp-controller="Battle" id="aiMoveForm">
                <input type="hidden" name="pokemon1Id" value="@Model.Pokemon1.PokemonID" />
                <input type="hidden" name="pokemon2Id" value="@Model.Pokemon2.PokemonID" />
                <input type="hidden" name="pokemon1CurrentHP" value="@Model.Pokemon1CurrentHP" />
                <input type="hidden" name="pokemon2CurrentHP" value="@Model.Pokemon2CurrentHP" />
                <input type="hidden" name="pokemon1Status" value="@Model.Pokemon1Status" />
                <input type="hidden" name="pokemon2Status" value="@Model.Pokemon2Status" />
                <input type="hidden" name="pokemon1SleepCounter" value="@Model.Pokemon1SleepCounter" />
                <input type="hidden" name="pokemon2SleepCounter" value="@Model.Pokemon2SleepCounter" />
                <input type="hidden" name="battleLog" value="@WebUtility.HtmlEncode(Model.BattleLog ?? "")" />
            </form>

            <script>
                setTimeout(() => {
                    if (!@battleOver.ToString().ToLower()) {
                        performAttack('pokemon2-sprite', 'pokemon1-sprite');
                        animateHPBar('player-hp-bar');
                        setTimeout(() => {
                            document.getElementById('aiMoveForm')?.submit();
                        }, 800);
                    }
                }, 100);
            </script>
        }
    }
    else
    {
        <h4 class="text-center text-danger">Battle Over</h4>
        <p class="text-center">
            <a href="/Battle/Index" class="btn btn-primary">Start New Battle</a>
        </p>
    }

<script>
    function animateHPBarOnce(barId, storageKey) {
        const bar = document.getElementById(barId);
        if (!bar) return;

        const maxHP = parseInt(bar.dataset.max);
        const currentHP = parseInt(bar.dataset.current);
        const storedHP = parseInt(localStorage.getItem(storageKey));

        if (!isNaN(storedHP) && storedHP !== currentHP) {
            const fromPercent = (storedHP * 100) / maxHP;
            const toPercent = (currentHP * 100) / maxHP;

            bar.style.transition = "none";
            bar.style.width = fromPercent + "%";
            void bar.offsetWidth;

            bar.style.transition = "width 0.6s ease";
            bar.style.width = toPercent + "%";
        } else {
            const widthPercent = (currentHP * 100) / maxHP;
            bar.style.transition = "none";
            bar.style.width = widthPercent + "%";
        }

        localStorage.setItem(storageKey, currentHP);
    }

    function clearHPMemoryIfBattleOver() {
        const isOver = "@Model.BattleOver".toLowerCase() === "true";
        if (isOver) {
            localStorage.removeItem("player-hp");
            localStorage.removeItem("ai-hp");
        }
    }

    window.addEventListener('DOMContentLoaded', () => {
        clearHPMemoryIfBattleOver();

        animateHPBarOnce('player-hp-bar', 'player-hp');
        animateHPBarOnce('ai-hp-bar', 'ai-hp');

        const isPlayerTurn = "@Model.IsPlayerOneTurn".toLowerCase() === "true";
        const battleOver = "@Model.BattleOver".toLowerCase() === "true";

        if (!battleOver && isPlayerTurn) {
            document.querySelectorAll('#moveForm button.move-button').forEach(button => {
                button.addEventListener('click', function () {
                    document.getElementById('moveNameInput').value = this.getAttribute('data-move');
                    performAttack('pokemon1-sprite', 'pokemon2-sprite');
                    animateHPBarOnce('ai-hp-bar', 'ai-hp');

                    setTimeout(() => {
                        document.getElementById('moveForm').submit();
                    }, 800);
                });
            });
        }

        if (!battleOver && !isPlayerTurn) {
            performAttack('pokemon2-sprite', 'pokemon1-sprite');
            animateHPBarOnce('player-hp-bar', 'player-hp');

            setTimeout(() => {
                document.getElementById('aiMoveForm')?.submit();
            }, 800);
        }
    });
</script>

<script src="/js/BattleStyles.js"></script>
</div>
